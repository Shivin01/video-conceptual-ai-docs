{"swagger": "2.0", "info": {"title": "BuildzAI API", "description": "AI-powered educational platform API for video transcript processing and content generation", "termsOfService": "https://www.google.com/policies/terms/", "contact": {"email": "contact@buildzai.com"}, "license": {"name": "MIT License"}, "version": "v1"}, "host": "localhost:8000", "schemes": ["http"], "basePath": "/", "consumes": ["application/json"], "produces": ["application/json"], "securityDefinitions": {"Basic": {"type": "basic"}}, "security": [{"Basic": []}], "paths": {"/api/register/": {"post": {"operationId": "api_register_create", "summary": "Register new user", "description": "\nRegister a new user account.\n\nCreates a new user account with the provided email and password.\nThe email will be used as the username for authentication.\n\n**Password Requirements:**\n- Minimum 8 characters\n- Must contain at least one letter and one number\n- Cannot be too common or similar to email\n\n**Email Requirements:**\n- Must be a valid email format\n- Must be unique (not already registered)\n", "parameters": [{"name": "data", "in": "body", "required": true, "schema": {"required": ["email", "password"], "type": "object", "properties": {"email": {"description": "User's email address (used as username)", "type": "string", "format": "email"}, "password": {"description": "User's password (minimum 8 characters)", "type": "string", "format": "password"}}}}], "responses": {"200": {"description": "User registered successfully", "schema": {"type": "object", "properties": {"message": {"type": "string", "example": "User registered successfully"}}}}, "400": {"description": "Bad request - Invalid email or password"}, "409": {"description": "Conflict - Email already exists"}}, "tags": ["api"]}, "parameters": []}, "/api/token/": {"post": {"operationId": "api_token_create", "description": "Takes a set of user credentials and returns an access and refresh JSON web\ntoken pair to prove the authentication of those credentials.", "parameters": [{"name": "data", "in": "body", "required": true, "schema": {"$ref": "#/definitions/TokenObtainPair"}}], "responses": {"201": {"description": "", "schema": {"$ref": "#/definitions/TokenObtainPair"}}}, "tags": ["api"]}, "parameters": []}, "/api/token/refresh/": {"post": {"operationId": "api_token_refresh_create", "description": "Takes a refresh type JSON web token and returns an access type JSON web\ntoken if the refresh token is valid.", "parameters": [{"name": "data", "in": "body", "required": true, "schema": {"$ref": "#/definitions/TokenRefresh"}}], "responses": {"201": {"description": "", "schema": {"$ref": "#/definitions/TokenRefresh"}}}, "tags": ["api"]}, "parameters": []}, "/builder/conceptual_tree/": {"get": {"operationId": "builder_conceptual_tree_list", "summary": "List conceptual trees", "description": "List all conceptual trees for a specific transcript", "parameters": [{"name": "transcript_id", "in": "query", "description": "Transcript ID to filter conceptual trees", "required": true, "type": "integer"}], "responses": {"200": {"description": "List of conceptual trees", "schema": {"type": "array", "items": {"$ref": "#/definitions/AIAgentVideoConceptualThumbnail"}}}, "400": {"description": "Bad request - Missing transcript_id or unauthorized"}, "401": {"description": "Unauthorized"}}, "tags": ["builder"]}, "post": {"operationId": "builder_conceptual_tree_create", "summary": "Generate conceptual tree", "description": "\nGenerate a new conceptual tree from a video transcript using AI.\n\nThis endpoint uses advanced AI models (GPT-4 or Claude) to analyze the transcript\nand create a hierarchical concept map showing the relationships between topics.\n\n**Process:**\n1. Validates the transcript belongs to the authenticated user\n2. Sends transcript data to AI model for analysis\n3. Generates a structured concept tree with hierarchical relationships\n4. Stores the result in the database\n\n**AI Models Used:**\n- OpenAI GPT-4 (default)\n- Anthropic Claude (alternative)\n", "parameters": [{"name": "data", "in": "body", "required": true, "schema": {"required": ["video_transcript_id"], "type": "object", "properties": {"video_transcript_id": {"description": "ID of the video transcript to analyze", "type": "integer"}}}}], "responses": {"201": {"description": "Conceptual tree created successfully", "schema": {"$ref": "#/definitions/AIAgentVideoConceptualThumbnail"}}, "400": {"description": "Bad request - Invalid transcript ID or AI generation failed"}, "401": {"description": "Unauthorized"}, "403": {"description": "Permission denied - Transcript not owned by user"}}, "tags": ["builder"]}, "parameters": []}, "/builder/conceptual_tree/{id}/": {"get": {"operationId": "builder_conceptual_tree_read", "summary": "Get conceptual tree details", "description": "Retrieve a specific conceptual tree by ID", "parameters": [], "responses": {"200": {"description": "Conceptual tree details", "schema": {"$ref": "#/definitions/AIAgentVideoConceptualThumbnail"}}, "404": {"description": "Conceptual tree not found"}, "403": {"description": "Permission denied"}}, "tags": ["builder"]}, "delete": {"operationId": "builder_conceptual_tree_delete", "summary": "Delete conceptual tree", "description": "Delete a conceptual tree", "parameters": [], "responses": {"204": {"description": "Conceptual tree deleted successfully"}, "404": {"description": "Conceptual tree not found"}, "403": {"description": "Permission denied"}}, "tags": ["builder"]}, "parameters": [{"name": "id", "in": "path", "required": true, "type": "string"}]}, "/builder/in_video_question/": {"get": {"operationId": "builder_in_video_question_list", "summary": "List in-video questions", "description": "List all in-video questions and answers for a specific transcript", "parameters": [{"name": "transcript_id", "in": "query", "description": "Transcript ID to filter questions", "required": true, "type": "integer"}], "responses": {"200": {"description": "List of in-video questions", "schema": {"type": "array", "items": {"$ref": "#/definitions/AIAgentInVideoQuestions"}}}, "400": {"description": "Bad request - Missing transcript_id or unauthorized"}, "401": {"description": "Unauthorized"}}, "tags": ["builder"]}, "post": {"operationId": "builder_in_video_question_create", "summary": "Ask question about video", "description": "\nAsk a specific question about video content and get an AI-generated answer.\n\nThis endpoint uses advanced AI models (GPT-4 or Claude) to analyze the transcript\nand provide detailed answers to specific questions about the video content.\n\n**Process:**\n1. Validates the transcript belongs to the authenticated user\n2. Sends transcript data and question to AI model for analysis\n3. Generates a comprehensive answer based on the video content\n4. Stores the question and answer in the database\n\n**AI Models Used:**\n- OpenAI GPT-4 (default)\n- Anthropic Claude (alternative)\n\n**Question Types Supported:**\n- Factual questions about content\n- Conceptual explanations\n- Analysis and interpretation\n- Application of concepts\n- Comparison questions\n", "parameters": [{"name": "data", "in": "body", "required": true, "schema": {"required": ["video_transcript_id", "question"], "type": "object", "properties": {"video_transcript_id": {"description": "ID of the video transcript to analyze", "type": "integer"}, "question": {"description": "Specific question about the video content", "type": "string"}}}}], "responses": {"201": {"description": "Question answered successfully", "schema": {"$ref": "#/definitions/AIAgentInVideoQuestions"}}, "400": {"description": "Bad request - Invalid transcript ID, missing question, or AI generation failed"}, "401": {"description": "Unauthorized"}, "403": {"description": "Permission denied - Transcript not owned by user"}}, "tags": ["builder"]}, "parameters": []}, "/builder/in_video_question/{id}/": {"get": {"operationId": "builder_in_video_question_read", "summary": "Get in-video question details", "description": "Retrieve a specific in-video question and answer by ID", "parameters": [], "responses": {"200": {"description": "Question details", "schema": {"$ref": "#/definitions/AIAgentInVideoQuestions"}}, "404": {"description": "Question not found"}, "403": {"description": "Permission denied"}}, "tags": ["builder"]}, "delete": {"operationId": "builder_in_video_question_delete", "summary": "Delete in-video question", "description": "Delete an in-video question and answer", "parameters": [], "responses": {"204": {"description": "Question deleted successfully"}, "404": {"description": "Question not found"}, "403": {"description": "Permission denied"}}, "tags": ["builder"]}, "parameters": [{"name": "id", "in": "path", "required": true, "type": "string"}]}, "/builder/transcripts/": {"get": {"operationId": "builder_transcripts_list", "summary": "List user transcripts", "description": "List all transcripts for the authenticated user", "parameters": [{"name": "video_transcript_id", "in": "query", "description": "Filter by specific transcript ID", "required": false, "type": "integer"}], "responses": {"200": {"description": "List of transcripts", "schema": {"type": "array", "items": {"$ref": "#/definitions/VideoTranscript"}}}, "401": {"description": "Unauthorized"}}, "tags": ["builder"]}, "post": {"operationId": "builder_transcripts_create", "summary": "Video Transcript ViewSet for managing video transcripts.", "description": "Provides CRUD operations for video transcripts with user isolation.\nEach user can only access their own transcripts.", "parameters": [{"name": "data", "in": "body", "required": true, "schema": {"$ref": "#/definitions/VideoTranscript"}}], "responses": {"201": {"description": "", "schema": {"$ref": "#/definitions/VideoTranscript"}}}, "tags": ["builder"]}, "parameters": []}, "/builder/transcripts/upload-file/": {"post": {"operationId": "builder_transcripts_upload_file", "summary": "Upload transcript file", "description": "\nUpload a transcript file and automatically process it.\n\n**Supported File Formats:**\n- **JSON Array**: `[{\"text\": \"Hello\", \"start\": 0.0, \"end\": 1.5}, ...]`\n- **JSON Whisper**: `{\"segments\": [{\"text\": \"Hello\", \"start\": 0.0, \"end\": 1.5}, ...]}`\n- **TXT**: Plain text that will be split into sentences with estimated timestamps\n\n**File Requirements:**\n- Maximum size: 10MB\n- Allowed extensions: .json, .txt\n- Encoding: UTF-8\n", "parameters": [{"name": "data", "in": "body", "required": true, "schema": {"required": ["transcript_file"], "type": "object", "properties": {"transcript_file": {"description": "Transcript file to upload (.json or .txt)", "type": "file"}}}}], "responses": {"201": {"description": "File uploaded successfully", "schema": {"type": "object", "properties": {"message": {"type": "string"}, "transcript": {"description": "Transcript data with id", "type": "object"}}}}, "400": {"description": "Bad request - Invalid file or data"}, "401": {"description": "Unauthorized"}}, "tags": ["builder"]}, "parameters": []}, "/builder/transcripts/{id}/": {"get": {"operationId": "builder_transcripts_read", "summary": "Get transcript details", "description": "Retrieve a specific transcript by ID", "parameters": [], "responses": {"200": {"description": "Transcript details", "schema": {"$ref": "#/definitions/VideoTranscript"}}, "404": {"description": "Transcript not found"}, "403": {"description": "Permission denied"}}, "tags": ["builder"]}, "put": {"operationId": "builder_transcripts_update", "summary": "Update transcript (not allowed)", "description": "Update is not allowed for transcripts", "parameters": [{"name": "data", "in": "body", "required": true, "schema": {"$ref": "#/definitions/VideoTranscript"}}], "responses": {"200": {"description": "", "schema": {"$ref": "#/definitions/VideoTranscript"}}, "400": {"description": "Update not allowed"}}, "tags": ["builder"]}, "patch": {"operationId": "builder_transcripts_partial_update", "summary": "Partial update transcript (not allowed)", "description": "Partial update is not allowed for transcripts", "parameters": [{"name": "data", "in": "body", "required": true, "schema": {"$ref": "#/definitions/VideoTranscript"}}], "responses": {"200": {"description": "", "schema": {"$ref": "#/definitions/VideoTranscript"}}, "400": {"description": "Partial update not allowed"}}, "tags": ["builder"]}, "delete": {"operationId": "builder_transcripts_delete", "summary": "Delete transcript", "description": "Delete a transcript", "parameters": [], "responses": {"204": {"description": "Transcript deleted successfully"}, "404": {"description": "Transcript not found"}, "403": {"description": "Permission denied"}}, "tags": ["builder"]}, "parameters": [{"name": "id", "in": "path", "required": true, "type": "string"}]}, "/builder/transcripts/{id}/reprocess-file/": {"post": {"operationId": "builder_transcripts_reprocess_file", "summary": "Reprocess transcript file", "description": "Reprocess the uploaded file for an existing transcript", "parameters": [{"name": "data", "in": "body", "required": true, "schema": {"$ref": "#/definitions/VideoTranscript"}}], "responses": {"200": {"description": "File reprocessed successfully", "schema": {"type": "object", "properties": {"message": {"type": "string"}, "transcript": {"description": "Transcript data", "type": "object"}}}}, "400": {"description": "Bad request - No file or processing error"}, "404": {"description": "Transcript not found"}, "403": {"description": "Permission denied"}}, "tags": ["builder"]}, "parameters": [{"name": "id", "in": "path", "required": true, "type": "string"}]}, "/builder/video_mcq/": {"get": {"operationId": "builder_video_mcq_list", "summary": "List MCQs", "description": "List all MCQs for a specific transcript", "parameters": [{"name": "transcript_id", "in": "query", "description": "Transcript ID to filter MCQs", "required": true, "type": "integer"}], "responses": {"200": {"description": "List of MCQs", "schema": {"type": "array", "items": {"$ref": "#/definitions/AIAgentMCQ"}}}, "400": {"description": "Bad request - Missing transcript_id or unauthorized"}, "401": {"description": "Unauthorized"}}, "tags": ["builder"]}, "post": {"operationId": "builder_video_mcq_create", "summary": "Generate MCQs", "description": "\nGenerate new Multiple Choice Questions (MCQs) from a video transcript using AI.\n\nThis endpoint uses advanced AI models (GPT-4 or Claude) to analyze the transcript\nand create multiple choice questions with 4 answer options and correct answers.\n\n**Process:**\n1. Validates the transcript belongs to the authenticated user\n2. Sends transcript data to AI model for analysis\n3. Generates 5 MCQs by default with varying difficulty levels\n4. Each MCQ includes question text, 4 answer options (a, b, c, d), and correct answer\n5. Stores the result in the database\n\n**AI Models Used:**\n- OpenAI GPT-4 (default)\n- Anthropic Claude (alternative)\n\n**Question Types Generated:**\n- Factual recall questions\n- Conceptual understanding questions\n- Application-based questions\n- Analysis questions\n", "parameters": [{"name": "data", "in": "body", "required": true, "schema": {"required": ["video_transcript_id"], "type": "object", "properties": {"video_transcript_id": {"description": "ID of the video transcript to analyze", "type": "integer"}}}}], "responses": {"201": {"description": "MCQs created successfully", "schema": {"$ref": "#/definitions/AIAgentMCQ"}}, "400": {"description": "Bad request - Invalid transcript ID or AI generation failed"}, "401": {"description": "Unauthorized"}, "403": {"description": "Permission denied - Transcript not owned by user"}}, "tags": ["builder"]}, "parameters": []}, "/builder/video_mcq/{id}/": {"get": {"operationId": "builder_video_mcq_read", "summary": "Get MCQ details", "description": "Retrieve a specific MCQ set by ID", "parameters": [], "responses": {"200": {"description": "MCQ details", "schema": {"$ref": "#/definitions/AIAgentMCQ"}}, "404": {"description": "MCQ set not found"}, "403": {"description": "Permission denied"}}, "tags": ["builder"]}, "delete": {"operationId": "builder_video_mcq_delete", "summary": "Delete MCQ set", "description": "Delete an MCQ set", "parameters": [], "responses": {"204": {"description": "MCQ set deleted successfully"}, "404": {"description": "MCQ set not found"}, "403": {"description": "Permission denied"}}, "tags": ["builder"]}, "parameters": [{"name": "id", "in": "path", "required": true, "type": "string"}]}}, "definitions": {"TokenObtainPair": {"required": ["email", "password"], "type": "object", "properties": {"email": {"title": "Email", "type": "string", "minLength": 1}, "password": {"title": "Password", "type": "string", "minLength": 1}}}, "TokenRefresh": {"required": ["refresh"], "type": "object", "properties": {"refresh": {"title": "Refresh", "type": "string", "minLength": 1}, "access": {"title": "Access", "type": "string", "readOnly": true, "minLength": 1}}}, "AIAgentVideoConceptualThumbnail": {"required": ["model_used", "video_transcript_id"], "type": "object", "properties": {"id": {"title": "ID", "type": "integer", "readOnly": true}, "created_at": {"title": "Created at", "type": "string", "format": "date-time", "readOnly": true}, "updated_at": {"title": "Updated at", "type": "string", "format": "date-time", "readOnly": true}, "model_used": {"title": "Model used", "type": "string", "maxLength": 100, "minLength": 1}, "model_response": {"title": "ModelResponse", "type": "object", "x-nullable": true}, "video_transcript_id": {"title": "Video transcript id", "type": "integer"}}}, "AIAgentInVideoQuestions": {"required": ["model_used", "question", "video_transcript_id"], "type": "object", "properties": {"id": {"title": "ID", "type": "integer", "readOnly": true}, "created_at": {"title": "Created at", "type": "string", "format": "date-time", "readOnly": true}, "updated_at": {"title": "Updated at", "type": "string", "format": "date-time", "readOnly": true}, "model_used": {"title": "Model used", "type": "string", "maxLength": 100, "minLength": 1}, "question": {"title": "Question", "type": "string", "maxLength": 500, "minLength": 1}, "model_response": {"title": "ModelResponse", "type": "object", "x-nullable": true}, "video_transcript_id": {"title": "Video transcript id", "type": "integer"}}}, "VideoTranscript": {"required": ["transcript_text", "transcript_json"], "type": "object", "properties": {"id": {"title": "ID", "type": "integer", "readOnly": true}, "transcript_text": {"title": "Transcript text", "type": "string", "minLength": 1}, "transcript_json": {"title": "Transcript json", "type": "object"}, "transcript_file": {"title": "Transcript file", "type": "string", "readOnly": true, "x-nullable": true, "format": "uri"}, "youtube_video": {"title": "Youtube video", "type": "integer", "x-nullable": true}, "created_at": {"title": "Created at", "type": "string", "format": "date-time", "readOnly": true}, "updated_at": {"title": "Updated at", "type": "string", "format": "date-time", "readOnly": true}}}, "AIAgentMCQ": {"required": ["model_used", "video_transcript_id"], "type": "object", "properties": {"id": {"title": "ID", "type": "integer", "readOnly": true}, "created_at": {"title": "Created at", "type": "string", "format": "date-time", "readOnly": true}, "updated_at": {"title": "Updated at", "type": "string", "format": "date-time", "readOnly": true}, "model_used": {"title": "Model used", "type": "string", "maxLength": 100, "minLength": 1}, "model_response": {"title": "ModelResponse", "type": "object", "x-nullable": true}, "video_transcript_id": {"title": "Video transcript id", "type": "integer"}}}}}